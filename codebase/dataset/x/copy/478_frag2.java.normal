compile  (  "BoundedThing.java"  ,  "// @(#)$Id: BoundedThing.java 1199 2009-02-17 19:42:32Z smshaner $\n"  +  "\n"  +  "// Copyright (C) 1998, 1999 Iowa State University\n"  +  "\n"  +  "// This file is part of JML\n"  +  "\n"  +  "// JML is free software; you can redistribute it and/or modify\n"  +  "// it under the terms of the GNU General Public License as published by\n"  +  "// the Free Software Foundation; either version 2, or (at your option)\n"  +  "// any later version.\n"  +  "\n"  +  "// JML is distributed in the hope that it will be useful,\n"  +  "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n"  +  "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"  +  "// GNU General Public License for more details.\n"  +  "\n"  +  "// You should have received a copy of the GNU General Public License\n"  +  "// along with JML; see the file COPYING.  If not, write to\n"  +  "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n"  +  "\n"  +  "import java.util.*;\n"  +  "public interface BoundedThing {\n"  +  "\n"  +  "    //@ public model instance int MAX_SIZE;\n"  +  "    //@ public model instance int size;\n"  +  "\n"  +  "    /*@ public instance invariant MAX_SIZE > 0;\n"  +  "        public instance invariant\n"  +  "                0 <= size && size <= MAX_SIZE;\n"  +  "        public instance constraint\n"  +  "                MAX_SIZE == \\old(MAX_SIZE);\n"  +  "      @*/\n"  +  "\n"  +  "    /*@  public normal_behavior\n"  +  "           ensures \\result == MAX_SIZE;\n"  +  "      @*/\n"  +  "    public /*@ pure @*/ int getSizeLimit();\n"  +  "\n"  +  "    /*@  public normal_behavior\n"  +  "           ensures \\result <==> size == 0;\n"  +  "      @*/\n"  +  "    public /*@ pure @*/ boolean isEmpty();\n"  +  "\n"  +  "    /*@  public normal_behavior\n"  +  "          ensures \\result <==> size == MAX_SIZE;\n"  +  "      @*/\n"  +  "    public /*@ pure @*/ boolean isFull();\n"  +  "\n"  +  "    /*@ also\n"  +  "         public behavior\n"  +  "           assignable \\nothing;\n"  +  "           ensures \\result instanceof BoundedThing\n"  +  "               && size == ((BoundedThing)\\result).size;\n"  +  "           signals_only CloneNotSupportedException;\n"  +  "      @*/\n"  +  "    public Object clone ()\n"  +  "       throws CloneNotSupportedException;\n"  +  "}\n"  +  "// @(#)$Id: BoundedStackInterface.java 1199 2009-02-17 19:42:32Z smshaner $\n"  +  "\n"  +  "// Copyright (C) 1998, 1999 Iowa State University\n"  +  "\n"  +  "// This file is part of JML\n"  +  "\n"  +  "// JML is free software; you can redistribute it and/or modify\n"  +  "// it under the terms of the GNU General Public License as published by\n"  +  "// the Free Software Foundation; either version 2, or (at your option)\n"  +  "// any later version.\n"  +  "\n"  +  "// JML is distributed in the hope that it will be useful,\n"  +  "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n"  +  "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"  +  "// GNU General Public License for more details.\n"  +  "\n"  +  "// You should have received a copy of the GNU General Public License\n"  +  "// along with JML; see the file COPYING.  If not, write to\n"  +  "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n"  +  "\n"  +  "\n"  +  "interface BoundedStackInterface extends BoundedThing {\n"  +  "    //@ public initially theStack != null && theStack.isEmpty();\n"  +  "  /*@ public model instance Stack theStack;\n"  +  "    @*/\n"  +  "  //@ public instance represents size <- theStack.size();\n"  +  "  /*@ public instance invariant theStack != null;\n"  +  "    @ public instance invariant_redundantly\n"  +  "    @                           theStack.size() <= MAX_SIZE;\n"  +  "    @ public instance invariant \n"  +  "    @         (\\forall int i; 0 <= i && i < theStack.size();\n"  +  "    @                         theStack.get(i) != null);\n"  +  "    @*/\n"  +  "\n"  +  "  /*@   public normal_behavior\n"  +  "    @     requires !theStack.isEmpty();\n"  +  "    @     assignable size, theStack;\n"  +  "    @     ensures theStack.equals(\\old(theStack));\n"  +  "    @ also\n"  +  "    @   public exceptional_behavior\n"  +  "    @     requires theStack.isEmpty();\n"  +  "    @     assignable \\nothing;\n"  +  "    @     signals_only BoundedStackException;\n"  +  "    @*/\n"  +  "  public void pop( ) throws BoundedStackException;\n"  +  "\n"  +  "  /*@   public normal_behavior\n"  +  "    @     requires theStack.size() < MAX_SIZE && x != null;\n"  +  "    @     assignable size, theStack;\n"  +  "    @     ensures theStack.equals(\\old(theStack.add(x)));\n"  +  "    @     ensures_redundantly theStack != null \n"  +  "    @              && theStack.size() \n"  +  "    @                     == \\old(theStack.size()+1);\n"  +  "    @ also\n"  +  "    @   public exceptional_behavior\n"  +  "    @     requires theStack.size() >= MAX_SIZE || x == null;\n"  +  "    @     assignable \\nothing;\n"  +  "    @     signals_only BoundedStackException, NullPointerException;\n"  +  "    @     signals (BoundedStackException)\n"  +  "    @                  theStack.size() == MAX_SIZE;\n"  +  "    @     signals (NullPointerException) x == null;\n"  +  "    @*/\n"  +  "  public void push(Object x )\n"  +  "         throws BoundedStackException, NullPointerException;\n"  +  "\n"  +  "  /*@   public normal_behavior\n"  +  "    @     requires !theStack.isEmpty();\n"  +  "    @     ensures \\result == theStack.get(0) && \\result != null;\n"  +  "    @ also\n"  +  "    @   public exceptional_behavior\n"  +  "    @     requires theStack.isEmpty();\n"  +  "    @     signals_only BoundedStackException;\n"  +  "    @     signals (BoundedStackException e)\n"  +  "    @           true;\n"  +  "    @*/\n"  +  "  public /*@ pure @*/ Object top( ) throws BoundedStackException;\n"  +  "}\n"  +  "// @(#)$Id: BoundedStackException.java 1199 2009-02-17 19:42:32Z smshaner $\n"  +  "\n"  +  "// Copyright (C) 1998, 1999 Iowa State University\n"  +  "\n"  +  "// This file is part of JML\n"  +  "\n"  +  "// JML is free software; you can redistribute it and/or modify\n"  +  "// it under the terms of the GNU General Public License as published by\n"  +  "// the Free Software Foundation; either version 2, or (at your option)\n"  +  "// any later version.\n"  +  "\n"  +  "// JML is distributed in the hope that it will be useful,\n"  +  "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n"  +  "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"  +  "// GNU General Public License for more details.\n"  +  "\n"  +  "// You should have received a copy of the GNU General Public License\n"  +  "// along with JML; see the file COPYING.  If not, write to\n"  +  "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n"  +  "\n"  +  "\n"  +  "class BoundedStackException extends RuntimeException {\n"  +  "\n"  +  "    public BoundedStackException() { super(); }\n"  +  "    public BoundedStackException(String s) { super(s); }\n"  +  "\n"  +  "}\n"  +  "// @(#)$Id: BoundedStack.java 1199 2009-02-17 19:42:32Z smshaner $\n"  +  "\n"  +  "// Copyright (C) 1998, 1999 Iowa State University\n"  +  "\n"  +  "// This file is part of JML\n"  +  "\n"  +  "// JML is free software; you can redistribute it and/or modify\n"  +  "// it under the terms of the GNU General Public License as published by\n"  +  "// the Free Software Foundation; either version 2, or (at your option)\n"  +  "// any later version.\n"  +  "\n"  +  "// JML is distributed in the hope that it will be useful,\n"  +  "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n"  +  "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"  +  "// GNU General Public License for more details.\n"  +  "\n"  +  "// You should have received a copy of the GNU General Public License\n"  +  "// along with JML; see the file COPYING.  If not, write to\n"  +  "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n"  +  "\n"  +  "\n"  +  "class BoundedStack implements BoundedStackInterface {\n"  +  "\n"  +  "  // implementation data structures\n"  +  "  protected java.lang.Object[] theItems;\n"  +  "  protected int nextFree;\n"  +  "  protected int maxSize;\n"  +  "\n"  +  "\n"  +  "  //@ protected invariant 0 <= nextFree && nextFree <= theItems.length;\n"  +  "  //@ protected invariant theItems != null;\n"  +  "    /*@ protected invariant\n"  +  "    @     (\\forall int i; 0 <= i && i < nextFree;\n"  +  "    @                     theItems[i] != null);\n"  +  "    @*/\n"  +  "\n"  +  "\n"  +  "  /*@ public normal_behavior\n"  +  "    @   assignable MAX_SIZE, size, theStack;\n"  +  "    @   ensures theStack.equals(new Stack());\n"  +  "    @   ensures_redundantly theStack.isEmpty() && size == 0;\n"  +  "    @*/\n"  +  "  public BoundedStack( )\n"  +  "  { \n"  +  "    maxSize = 10;\n"  +  "    theItems = new Object[maxSize];\n"  +  "    nextFree = 0;\n"  +  "    /*@ assert \\fresh(theItems) && nextFree == 0\n"  +  "      @   && theItems.length == maxSize;\n"  +  "      @*/\n"  +  "  }\n"  +  "\n"  +  "  /*@ public normal_behavior\n"  +  "    @   assignable MAX_SIZE, size, theStack;\n"  +  "    @   ensures theStack.equals(new Stack());\n"  +  "    @   ensures_redundantly theStack.isEmpty() && size == 0\n"  +  "    @        && MAX_SIZE == maxSize;\n"  +  "    @*/\n"  +  "  public BoundedStack(int maxSize)\n"  +  "  { \n"  +  "    theItems = new Object[maxSize];\n"  +  "    nextFree = 0;\n"  +  "    this.maxSize = maxSize;\n"  +  "    /*@ assert \\fresh(theItems) && nextFree == 0\n"  +  "      @   && theItems.length == maxSize;\n"  +  "      @*/\n"  +  "  }\n"  +  "\n"  +  "  public Object clone ()\n"  +  "  {\n"  +  "    BoundedStack retValue = new BoundedStack(maxSize);\n"  +  "    retValue.nextFree = nextFree;\n"  +  "    for (int k = 0; k < nextFree; k++) {\n"  +  "      retValue.theItems[k] = theItems[k];\n"  +  "    }\n"  +  "    return retValue;\n"  +  "  }\n"  +  "\n"  +  "  public int getSizeLimit()\n"  +  "  {\n"  +  "    return maxSize;\n"  +  "  }\n"  +  "\n"  +  "  public boolean isEmpty( )\n"  +  "  {\n"  +  "    return (nextFree == 0);\n"  +  "  }\n"  +  "\n"  +  "  public boolean isFull()\n"  +  "  {\n"  +  "    return (nextFree == maxSize);\n"  +  "  }\n"  +  "\n"  +  "  public void pop( ) throws BoundedStackException\n"  +  "  {\n"  +  "    if (nextFree == 0) {\n"  +  "      throw new BoundedStackException(\"Tried to pop an empty stack.\");\n"  +  "    } else {\n"  +  "      nextFree--;\n"  +  "      //@ assert nextFree == \\old(nextFree) - 1;\n"  +  "      return;\n"  +  "    }   \n"  +  "  }\n"  +  "\n"  +  "  public void push(Object x ) throws BoundedStackException\n"  +  "  {\n"  +  "    if (nextFree == maxSize) {\n"  +  "      throw new BoundedStackException(\"Tried to push onto a full stack\");\n"  +  "    } else if (x == null) {\n"  +  "      throw new NullPointerException(\"Argument x to push is null\");\n"  +  "    } else {\n"  +  "      theItems[nextFree++] = x;\n"  +  "      return;\n"  +  "    }   \n"  +  "  }\n"  +  "\n"  +  "  public Object top( ) throws BoundedStackException\n"  +  "  {\n"  +  "    if (nextFree == 0) {\n"  +  "      throw new BoundedStackException(\"empty stack\");\n"  +  "    } else {\n"  +  "      return theItems[nextFree - 1];\n"  +  "    }\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   public normal_behavior\n"  +  "    @     assignable \\nothing;\n"  +  "    @     ensures \\result != null\n"  +  "    @          && (* a string encoding of this is returned *);\n"  +  "    @*/\n"  +  "  public String toString()\n"  +  "  {\n"  +  "    StringBuffer ret = new StringBuffer(this.getClass().toString() + \" [\");\n"  +  "    boolean first = true;\n"  +  "    for (int k = nextFree - 1; k >= 0; k--) {\n"  +  "        if (first) {\n"  +  "            first = false;\n"  +  "        } else {\n"  +  "            ret.append(\", \");\n"  +  "        }\n"  +  "        if (theItems[k] != null) {\n"  +  "            ret.append(theItems[k]);\n"  +  "        } else {\n"  +  "            ret.append(\"null\");\n"  +  "        }\n"  +  "    } \n"  +  "    ret.append(\"]\");\n"  +  "    return ret.toString();\n"  +  "  }\n"  +  "\n"  +  "  /*@ protected normal_behavior\n"  +  "    @   assignable System.out;\n"  +  "    @   ensures (* prints a version of stack to System.out *);\n"  +  "    @*/\n"  +  "  protected void printStack ( )\n"  +  "  {\n"  +  "    System.out.println(\"The stack items are (top first):\");\n"  +  "    System.out.println(toString());\n"  +  "  }\n"  +  "}\n"  +  "// @(#)$Id: BoundedStackImplementation.java 1199 2009-02-17 19:42:32Z smshaner $\n"  +  "\n"  +  "// Copyright (C) 1998, 1999 Iowa State University\n"  +  "\n"  +  "// This file is part of JML\n"  +  "\n"  +  "// JML is free software; you can redistribute it and/or modify\n"  +  "// it under the terms of the GNU General Public License as published by\n"  +  "// the Free Software Foundation; either version 2, or (at your option)\n"  +  "// any later version.\n"  +  "\n"  +  "// JML is distributed in the hope that it will be useful,\n"  +  "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n"  +  "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"  +  "// GNU General Public License for more details.\n"  +  "\n"  +  "// You should have received a copy of the GNU General Public License\n"  +  "// along with JML; see the file COPYING.  If not, write to\n"  +  "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n"  +  "\n"  +  "\n"  +  "class BoundedStackImplementation implements BoundedStackInterface {\n"  +  "\n"  +  "  // implementation data structures\n"  +  "  protected java.lang.Object[] theItems;\n"  +  "  protected int nextFree;\n"  +  "  //@ protected invariant 0 <= nextFree && nextFree <= theItems.length;\n"  +  "  //@ protected invariant theItems != null;\n"  +  "   /*@ protected invariant\n"  +  "    @     (\\forall int i; 0 <= i && i < nextFree;\n"  +  "    @                     theItems[i] != null);\n"  +  "    @*/\n"  +  "\n"  +  "  private static int MAX_STACK_ITEMS = 10;\n"  +  "\n"  +  "\n"  +  "  //@ private invariant theItems.length == MAX_STACK_ITEMS;\n"  +  "\n"  +  "  /*@ protected normal_behavior\n"  +  "    @   assignable size, theStack;\n"  +  "    @   assignable_redundantly theItems, nextFree;\n"  +  "    @   ensures nextFree == 0;\n"  +  "    @*/\n"  +  "  public BoundedStackImplementation( )\n"  +  "  {\n"  +  "    theItems = new Object[MAX_STACK_ITEMS];\n"  +  "    nextFree = 0;\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   protected behavior\n"  +  "    @     assignable \\nothing;\n"  +  "    @     ensures \n"  +  "    @       Arrays.equals(theItems,\n"  +  "    @                     ((BoundedStackImplementation)\\result).theItems) && \n"  +  "    @         nextFree == ((BoundedStackImplementation)\\result).nextFree\n"  +  "    @         && this != \\result;\n"  +  "    @     ensures_redundantly \\result != null;\n"  +  "    @*/\n"  +  "  public java.lang.Object clone () throws CloneNotSupportedException\n"  +  "  {\n"  +  "      BoundedStackImplementation res = new BoundedStackImplementation();\n"  +  "      res.theItems = (Object[])(theItems.clone());\n"  +  "      res.nextFree = nextFree;\n"  +  "      return res;\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   protected normal_behavior\n"  +  "    @     ensures \\result == theItems.length;\n"  +  "    @ implies_that\n"  +  "    @     private normal_behavior\n"  +  "    @     ensures \\result == MAX_STACK_ITEMS;\n"  +  "    @*/\n"  +  "  public int getSizeLimit()\n"  +  "  {\n"  +  "    return MAX_STACK_ITEMS;\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   protected normal_behavior\n"  +  "    @       ensures \\result == (nextFree == 0);\n"  +  "    @*/\n"  +  "  public boolean isEmpty( )\n"  +  "  {\n"  +  "    return (nextFree == 0);\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   protected normal_behavior\n"  +  "    @     ensures \\result == (nextFree == theItems.length);\n"  +  "    @*/\n"  +  "  public boolean isFull()\n"  +  "  {\n"  +  "    return (nextFree == MAX_STACK_ITEMS);\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @    protected normal_behavior\n"  +  "    @     requires nextFree != 0;\n"  +  "    @     assignable theStack;\n"  +  "    @     assignable_redundantly nextFree;\n"  +  "    @     ensures nextFree == \\old(nextFree - 1)\n"  +  "    @           && \\not_modified(theItems);\n"  +  "    @     ensures_redundantly Arrays.equals(theItems,\\old(theItems));\n"  +  "    @ also \n"  +  "    @    protected exceptional_behavior\n"  +  "    @     requires nextFree == 0;\n"  +  "    @     assignable \\nothing;\n"  +  "    @     signals_only BoundedStackException;\n"  +  "    @*/\n"  +  "  public void pop( ) throws BoundedStackException\n"  +  "  {\n"  +  "    if (nextFree == 0) {\n"  +  "      throw new BoundedStackException(\"Tried to pop an empty stack.\");\n"  +  "    } else {\n"  +  "      nextFree--;\n"  +  "      return;\n"  +  "    }   \n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @    protected normal_behavior\n"  +  "    @     requires nextFree < theItems.length && x != null;\n"  +  "    @     assignable theStack;\n"  +  "    @     assignable_redundantly nextFree, theItems[nextFree];\n"  +  "    @ also\n"  +  "    @   protected exceptional_behavior\n"  +  "    @     requires nextFree >= theItems.length || x == null;\n"  +  "    @     assignable \\nothing;\n"  +  "    @     signals (BoundedStackException) nextFree >= theItems.length;\n"  +  "    @     signals (NullPointerException) x == null;\n"  +  "    @*/\n"  +  "  public void push(Object x ) throws BoundedStackException\n"  +  "  {\n"  +  "        if (nextFree == MAX_STACK_ITEMS) {\n"  +  "          throw new BoundedStackException(\"Tried to push onto a full stack\");\n"  +  "        } else if (x == null) {\n"  +  "          throw new NullPointerException(\"Argument x to push is null\");\n"  +  "        } else {\n"  +  "          theItems[nextFree++] = x;\n"  +  "          return;\n"  +  "        }       \n"  +  "    }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   protected normal_behavior\n"  +  "    @     requires nextFree != 0;\n"  +  "    @     assignable \\nothing;\n"  +  "    @     ensures \\result == theItems[(int)(nextFree - 1)];\n"  +  "    @ also \n"  +  "    @   protected exceptional_behavior\n"  +  "    @     requires nextFree == 0;\n"  +  "    @     assignable \\nothing;\n"  +  "    @*/\n"  +  "  public Object top( ) throws BoundedStackException\n"  +  "  {\n"  +  "    if (nextFree == 0) {\n"  +  "      throw new BoundedStackException(\"empty stack\");\n"  +  "    } else {\n"  +  "      return theItems[nextFree - 1];\n"  +  "    }\n"  +  "  }\n"  +  "\n"  +  "  /*@ also\n"  +  "    @   public normal_behavior\n"  +  "    @     assignable \\nothing;\n"  +  "    @     ensures \\result != null\n"  +  "    @          && (* a string encoding of this is returned *);\n"  +  "    @*/\n"  +  "  public String toString()\n"  +  "  {\n"  +  "    StringBuffer ret = new StringBuffer(this.getClass().toString() + \" [\");\n"  +  "    boolean first = true;\n"  +  "    for (int k = nextFree - 1; k >= 0; k--) {\n"  +  "        if (first) {\n"  +  "            first = false;\n"  +  "        } else {\n"  +  "            ret.append(\", \");\n"  +  "        }\n"  +  "        if (theItems[k] != null) {\n"  +  "            ret.append(theItems[k]);\n"  +  "        } else {\n"  +  "            ret.append(\"null\");\n"  +  "        }\n"  +  "    } \n"  +  "    ret.append(\"]\");\n"  +  "    return ret.toString();\n"  +  "  }\n"  +  "\n"  +  "  /*@ protected normal_behavior\n"  +  "    @   assignable System.out;\n"  +  "    @   ensures (* prints a version of stack to System.out *);\n"  +  "    @*/\n"  +  "  protected void printStack ( )\n"  +  "  {\n"  +  "    System.out.println(\"The stack items are (top first):\");\n"  +  "    System.out.println(toString());\n"  +  "  }\n"  +  "}\n"  ,  ""  )  ; 

