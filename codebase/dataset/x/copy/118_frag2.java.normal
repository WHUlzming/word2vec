return   null  ; 

}  finally  { 

try  { 

oos  .  close  (  )  ; 

}  catch  (  Exception   e  )  { 

} 

try  { 

gzos  .  close  (  )  ; 

}  catch  (  Exception   e  )  { 

} 

try  { 

b64os  .  close  (  )  ; 

}  catch  (  Exception   e  )  { 

} 

try  { 

baos  .  close  (  )  ; 

}  catch  (  Exception   e  )  { 

} 

} 

try  { 

return   new   String  (  baos  .  toByteArray  (  )  ,  PREFERRED_ENCODING  )  ; 

}  catch  (  java  .  io  .  UnsupportedEncodingException   uue  )  { 

return   new   String  (  baos  .  toByteArray  (  )  )  ; 

} 

} 















public   static   String   encodeBytes  (  byte  [  ]  source  )  { 

return   encodeBytes  (  source  ,  0  ,  source  .  length  ,  NO_OPTIONS  )  ; 

} 















































public   static   String   encodeBytes  (  byte  [  ]  source  ,  int   options  )  { 

return   encodeBytes  (  source  ,  0  ,  source  .  length  ,  options  )  ; 

} 



















public   static   String   encodeBytes  (  byte  [  ]  source  ,  int   off  ,  int   len  )  { 

return   encodeBytes  (  source  ,  off  ,  len  ,  NO_OPTIONS  )  ; 

} 























































public   static   String   encodeBytes  (  byte  [  ]  source  ,  int   off  ,  int   len  ,  int   options  )  { 

int   dontBreakLines  =  (  options  &  DONT_BREAK_LINES  )  ; 

int   gzip  =  (  options  &  GZIP  )  ; 

if  (  gzip  ==  GZIP  )  { 

java  .  io  .  ByteArrayOutputStream   baos  =  null  ; 

java  .  util  .  zip  .  GZIPOutputStream   gzos  =  null  ; 

Base64  .  OutputStream   b64os  =  null  ; 

try  { 

baos  =  new   java  .  io  .  ByteArrayOutputStream  (  )  ; 

