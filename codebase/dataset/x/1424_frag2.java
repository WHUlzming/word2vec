        compile("Proof.java", "// @(#)$Id: Proof.java 1199 2009-02-17 19:42:32Z smshaner $\n" + "\n" + "// Copyright (C) 2000 Iowa State University\n" + "\n" + "// This file is part of JML\n" + "\n" + "// JML is free software; you can redistribute it and/or modify\n" + "// it under the terms of the GNU General Public License as published by\n" + "// the Free Software Foundation; either version 2, or (at your option)\n" + "// any later version.\n" + "\n" + "// JML is distributed in the hope that it will be useful,\n" + "// but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + "// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + "// GNU General Public License for more details.\n" + "\n" + "// You should have received a copy of the GNU General Public License\n" + "// along with JML; see the file COPYING.  If not, write to\n" + "// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n" + "\n" + "/** A class that demonstrates Floyd-Hoare-style proofs using JML\n" + " * notation.  This was originally used as an exercise for a class at\n" + " * the University of Iowa.\n" + " * @author Gary T. Leavens */\n" + "public class Proof {\n" + "\n" + "    /** A variable to keep track of the minimum. */\n" + "    protected /*@ spec_public @*/ int min = Integer.MAX_VALUE;\n" + "\n" + "    /** Exercise 1: find the minimum element in an array. */\n" + "    /*@ public normal_behavior\n" + "      @   requires a != null && a.length >= 1;\n" + "      @   assignable min;\n" + "      @   ensures (\\forall int i; 0 <= i && i < a.length; min <= a[i])\n" + "      @      && (\\exists int i; 0 <= i && i < a.length; min == a[i]);\n" + "      @*/\n" + "    public void find_min (int a[])\n" + "    {\n" + "        //@ assert a != null && a.length >= 1;\n" + "        /*@ assert (\\forall int i; 0 <= i && i < 1; a[0] <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < 1; a[0] == a[i])\n" + "          @   && a.length >= 1;\n" + "          @*/\n" + "        min = a[0];\n" + "        /*@ assert (\\forall int i; 0 <= i && i < 1; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < 1; min == a[i])\n" + "          @   && a.length >= 1;\n" + "          @*/\n" + "        int j = 1;\n" + "        /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "          @   && a.length >= j;\n" + "          @*/\n" + "        /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "          @   && j < a.length + 1;\n" + "          @*/\n" + "        while (j < a.length) {\n" + "            //@ ghost final int m = a.length - j;\n" + "            /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "              @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "              @   && j < a.length + 1\n" + "              @   && j < a.length \n" + "              @   && (a.length - j) <= m;\n" + "              @*/\n" + "            /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "              @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "              @   && j < a.length\n" + "              @   && 0 <= m && (a.length - j) <= m;\n" + "              @*/\n" + "            if (a[j] < min) {\n" + "                /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "                  @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && (a.length - j) <= m\n" + "                  @   && a[j] < min;\n" + "                  @*/\n" + "                /*@ assert (\\forall int i; 0 <= i && i < (j+1) ==> a[j] <= a[i])\n" + "                  @   && (\\exists int i; 0 <= i && i < (j+1) && a[j] == a[i])\n" + "                  @   && j+1 < a.length + 1\n" + "                  @   && 0 <= m && (a.length - (j+1)) < m;\n" + "                  @*/\n" + "                min = a[j];\n" + "                /*@ assert (\\forall int i; 0 <= i && i < (j+1) ==> min <= a[i])\n" + "                  @   && (\\exists int i; 0 <= i && i < (j+1) && min == a[i])\n" + "                  @   && j+1 < a.length + 1\n" + "                  @   && 0 <= m && (a.length - (j+1)) < m;\n" + "                  @*/\n" + "            }\n" + "            /*@ assert (\\forall int i; 0 <= i && i < (j+1) ==> min <= a[i])\n" + "              @   && (\\exists int i; 0 <= i && i < (j+1) && min == a[i])\n" + "              @   && j+1 < a.length + 1\n" + "              @   && 0 <= m && (a.length - (j+1)) < m;\n" + "              @*/\n" + "            j = j + 1;\n" + "            /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "              @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "              @   && j < a.length + 1\n" + "              @   && 0 <= m && (a.length - j) < m;\n" + "              @*/\n" + "        }\n" + "        /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "          @   && j < a.length + 1\n" + "          @   && j >= a.length;\n" + "          @*/\n" + "        /*@ assert (\\forall int i; 0 <= i && i < j; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < j; min == a[i])\n" + "          @   && j == a.length;\n" + "          @*/\n" + "        /*@ assert (\\forall int i; 0 <= i && i < a.length; min <= a[i])\n" + "          @   && (\\exists int i; 0 <= i && i < a.length; min == a[i]);\n" + "          @*/\n" + "    }\n" + "\n" + "    /** The index where the element occurs for exercise 2. */\n" + "    private /*@ spec_public @*/ int res = 0;\n" + "\n" + "    /** Return the value of res */\n" + "    public int getRes() { return res; }\n" + "\n" + "    /** Exercise 2: find the index of an integer in an array. */\n" + "    /*@ public normal_behavior\n" + "      @   requires a != null\n" + "      @      && (\\exists int i; 0 <= i && i < a.length; a[i] == x);\n" + "      @   assignable res;\n" + "      @   ensures 0 <= res && res < a.length && a[res] == x;\n" + "      @*/\n" + "    public void find(int a[], int x)\n" + "    {\n" + "        /*@ assert a != null\n" + "          @   && (\\exists int i; 0 <= i && i < a.length; a[i] == x);\n" + "          @*/\n" + "        /*@ assert ((\\exists int i; 0 <= i && i < 0;\n" + "          @                          a[i] == x && res == i)\n" + "          @          || (\\exists int i; 0 <= i && i < a.length;\n" + "          @                             a[i] == x))\n" + "          @   && 0 < a.length + 1;\n" + "          @*/\n" + "        int j = 0;\n" + "        /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "          @                          a[i] == x && res == i)\n" + "          @               || (\\exists int i; j <= i && i < a.length;\n" + "          @                                  a[i] == x))\n" + "          @   && j < a.length + 1;\n" + "          @*/\n" + "        while (j < a.length) {\n" + "            //@ ghost final int m = a.length - j;\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && j <= a.length + 1\n" + "              @   && j < a.length\n" + "              @   && a.length - j <= m;\n" + "              @*/\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && j <= a.length + 1\n" + "              @   && j < a.length\n" + "              @   && 0 < a.length - j\n" + "              @   && a.length - j <= m;\n" + "              @*/\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && j < a.length\n" + "              @   && 0 <= m && a.length - j <= m;\n" + "              @*/\n" + "\n" + "            if (a[j] == x) {\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j <= i && i < a.length;\n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m\n" + "                  @   && a[j] == x;\n" + "                  @*/\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j <= i && i < j+1;\n" + "                  @                             a[i] == x && j == i)\n" + "                  @          || (\\exists int i; j+1 <= i && i < a.length;\n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m\n" + "                  @   && a[j] == x;\n" + "                  @*/\n" + "      \n" + "                res = j;\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j <= i && i < j+1;\n" + "                  @                             a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j+1 <= i && i < a.length; \n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m\n" + "                  @   && a[res] == x;\n" + "                  @*/\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j+1;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j+1 <= i && i < a.length;\n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m;\n" + "                  @*/\n" + "\n" + "            }\n" + "            else {\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j <= i && i < a.length;\n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m\n" + "                  @   && a[j] != x;\n" + "                  @*/\n" + "                /*@ assert ((\\exists int i; 0 <= i && i < j+1;\n" + "                  @                          a[i] == x && res == i)\n" + "                  @          || (\\exists int i; j+1 <= i && i < a.length;\n" + "                  @                             a[i] == x))\n" + "                  @   && j < a.length\n" + "                  @   && 0 <= m && a.length - j <= m;\n" + "                  @*/\n" + "            }\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j+1; \n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j+1 <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && j < a.length\n" + "              @   && 0 <= m && a.length - j <= m;\n" + "              @*/\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j+1;\n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j+1 <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && (j+1) < a.length + 1\n" + "              @   && 0 <= m && a.length - (j+1) < m;\n" + "              @*/\n" + "\n" + "            j = j + 1;\n" + "            /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "              @                          a[i] == x && res == i)\n" + "              @          || (\\exists int i; j <= i && i < a.length;\n" + "              @                             a[i] == x))\n" + "              @   && j < a.length + 1\n" + "              @   && 0 <= m && a.length - j < m;\n" + "              @*/\n" + "        }\n" + "        /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "          @                          a[i] == x && res == i)\n" + "          @          || (\\exists int i; j <= i && i < a.length;\n" + "          @                             a[i] == x))\n" + "          @   && j < a.length + 1\n" + "          @   && j >= a.length;\n" + "          @*/\n" + "\n" + "        /*@ assert ((\\exists int i; 0 <= i && i < j;\n" + "          @                          a[i] == x && res == i)\n" + "          @          || (\\exists int i; j <= i && i < a.length;\n" + "          @                             a[i] == x))\n" + "          @   && j == a.length;\n" + "          @*/\n" + "        /*@ assert ((\\exists int i; 0 <= i && i < a.length;\n" + "          @                          a[i] == x && res == i)\n" + "          @          || (\\exists int i; a.length <= i && i < a.length;\n" + "          @                             a[i] == x));\n" + "          @*/\n" + "        /*@ assert (\\exists int i; 0 <= i && i < a.length;\n" + "          @                         a[i] == x && res == i);\n" + "          @*/\n" + "        //@ assert 0 <= res && res < a.length && a[res] == x;\n" + "    }\n" + "\n" + "}\n");
