public   class   PetriNavigatorLinkHelper   implements   ILinkHelper  { 









private   static   IEditorInput   getEditorInput  (  Diagram   diagram  )  { 

Resource   diagramResource  =  diagram  .  eResource  (  )  ; 

for  (  Iterator   it  =  diagramResource  .  getContents  (  )  .  iterator  (  )  ;  it  .  hasNext  (  )  ;  )  { 

EObject   nextEObject  =  (  EObject  )  it  .  next  (  )  ; 

if  (  nextEObject  ==  diagram  )  { 

return   new   FileEditorInput  (  WorkspaceSynchronizer  .  getFile  (  diagramResource  )  )  ; 

} 

if  (  nextEObject   instanceof   Diagram  )  { 

break  ; 

} 

} 

URI   uri  =  EcoreUtil  .  getURI  (  diagram  )  ; 

String   editorName  =  uri  .  lastSegment  (  )  +  "#"  +  diagram  .  eResource  (  )  .  getContents  (  )  .  indexOf  (  diagram  )  ; 

IEditorInput   editorInput  =  new   URIEditorInput  (  uri  ,  editorName  )  ; 

return   editorInput  ; 

} 









public   IStructuredSelection   findSelection  (  IEditorInput   anInput  )  { 

IDiagramDocument   document  =  PetriDiagramDebuggerPlugin  .  getInstance  (  )  .  getDocumentProvider  (  )  .  getDiagramDocument  (  anInput  )  ; 

if  (  document  ==  null  )  { 

return   StructuredSelection  .  EMPTY  ; 

} 

Diagram   diagram  =  document  .  getDiagram  (  )  ; 

IFile   file  =  WorkspaceSynchronizer  .  getFile  (  diagram  .  eResource  (  )  )  ; 

if  (  file  !=  null  )  { 

PetriNavigatorItem   item  =  new   PetriNavigatorItem  (  diagram  ,  file  ,  false  )  ; 

return   new   StructuredSelection  (  item  )  ; 

} 

return   StructuredSelection  .  EMPTY  ; 

} 









public   void   activateEditor  (  IWorkbenchPage   aPage  ,  IStructuredSelection   aSelection  )  { 

if  (  aSelection  ==  null  ||  aSelection  .  isEmpty  (  )  )  { 

return  ; 

} 

if  (  false  ==  aSelection  .  getFirstElement  (  )  instanceof   PetriAbstractNavigatorItem  )  { 

return  ; 

} 

PetriAbstractNavigatorItem   abstractNavigatorItem  =  (  PetriAbstractNavigatorItem  )  aSelection  .  getFirstElement  (  )  ; 

View   navigatorView  =  null  ; 

if  (  abstractNavigatorItem   instanceof   PetriNavigatorItem  )  { 

navigatorView  =  (  (  PetriNavigatorItem  )  abstractNavigatorItem  )  .  getView  (  )  ; 

}  else   if  (  abstractNavigatorItem   instanceof   PetriNavigatorGroup  )  { 

PetriNavigatorGroup   navigatorGroup  =  (  PetriNavigatorGroup  )  abstractNavigatorItem  ; 

if  (  navigatorGroup  .  getParent  (  )  instanceof   PetriNavigatorItem  )  { 

navigatorView  =  (  (  PetriNavigatorItem  )  navigatorGroup  .  getParent  (  )  )  .  getView  (  )  ; 

} 

} 

if  (  navigatorView  ==  null  )  { 

return  ; 

} 

IEditorInput   editorInput  =  getEditorInput  (  navigatorView  .  getDiagram  (  )  )  ; 

IEditorPart   editor  =  aPage  .  findEditor  (  editorInput  )  ; 

if  (  editor  ==  null  )  { 

return  ; 

} 

aPage  .  bringToTop  (  editor  )  ; 

if  (  editor   instanceof   DiagramEditor  )  { 

DiagramEditor   diagramEditor  =  (  DiagramEditor  )  editor  ; 

ResourceSet   diagramEditorResourceSet  =  diagramEditor  .  getEditingDomain  (  )  .  getResourceSet  (  )  ; 

EObject   selectedView  =  diagramEditorResourceSet  .  getEObject  (  EcoreUtil  .  getURI  (  navigatorView  )  ,  true  )  ; 

if  (  selectedView  ==  null  )  { 

return  ; 

} 

GraphicalViewer   graphicalViewer  =  (  GraphicalViewer  )  diagramEditor  .  getAdapter  (  GraphicalViewer  .  class  )  ; 

EditPart   selectedEditPart  =  (  EditPart  )  graphicalViewer  .  getEditPartRegistry  (  )  .  get  (  selectedView  )  ; 

if  (  selectedEditPart  !=  null  )  { 

graphicalViewer  .  select  (  selectedEditPart  )  ; 

} 

} 

} 

} 

