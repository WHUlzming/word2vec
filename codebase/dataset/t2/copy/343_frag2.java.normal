resize  =  new   boolean  [  code  .  length  ]  ; 

int   state  =  3  ; 

do  { 

if  (  state  ==  3  )  { 

state  =  2  ; 

} 

u  =  0  ; 

while  (  u  <  b  .  length  )  { 

int   opcode  =  b  [  u  ]  &  0xFF  ; 

int   insert  =  0  ; 

switch  (  ClassWriter  .  TYPE  [  opcode  ]  )  { 

case   ClassWriter  .  NOARG_INSN  : 

case   ClassWriter  .  IMPLVAR_INSN  : 

u  +=  1  ; 

break  ; 

case   ClassWriter  .  LABEL_INSN  : 

if  (  opcode  >  201  )  { 

opcode  =  opcode  <  218  ?  opcode  -  49  :  opcode  -  20  ; 

label  =  u  +  readUnsignedShort  (  b  ,  u  +  1  )  ; 

}  else  { 

label  =  u  +  readShort  (  b  ,  u  +  1  )  ; 

} 

newOffset  =  getNewOffset  (  allIndexes  ,  allSizes  ,  u  ,  label  )  ; 

if  (  newOffset  <  Short  .  MIN_VALUE  ||  newOffset  >  Short  .  MAX_VALUE  )  { 

if  (  !  resize  [  u  ]  )  { 

if  (  opcode  ==  Constants  .  GOTO  ||  opcode  ==  Constants  .  JSR  )  { 

insert  =  2  ; 

}  else  { 

insert  =  5  ; 

} 

resize  [  u  ]  =  true  ; 

} 

} 

u  +=  3  ; 

break  ; 

case   ClassWriter  .  LABELW_INSN  : 

u  +=  5  ; 

break  ; 

case   ClassWriter  .  TABL_INSN  : 

if  (  state  ==  1  )  { 

newOffset  =  getNewOffset  (  allIndexes  ,  allSizes  ,  0  ,  u  )  ; 

insert  =  -  (  newOffset  &  3  )  ; 

}  else   if  (  !  resize  [  u  ]  )  { 

insert  =  u  &  3  ; 

resize  [  u  ]  =  true  ; 

} 

u  =  u  +  4  -  (  u  &  3  )  ; 

u  +=  4  *  (  readInt  (  b  ,  u  +  8  )  -  readInt  (  b  ,  u  +  4  )  +  1  )  +  12  ; 

break  ; 

case   ClassWriter  .  LOOK_INSN  : 

if  (  state  ==  1  )  { 

newOffset  =  getNewOffset  (  allIndexes  ,  allSizes  ,  0  ,  u  )  ; 

insert  =  -  (  newOffset  &  3  )  ; 

}  else   if  (  !  resize  [  u  ]  )  { 

insert  =  u  &  3  ; 

resize  [  u  ]  =  true  ; 

} 

u  =  u  +  4  -  (  u  &  3  )  ; 

u  +=  8  *  readInt  (  b  ,  u  +  4  )  +  8  ; 

break  ; 

case   ClassWriter  .  WIDE_INSN  : 

opcode  =  b  [  u  +  1  ]  &  0xFF  ; 

if  (  opcode  ==  Constants  .  IINC  )  { 

u  +=  6  ; 

}  else  { 

u  +=  4  ; 

} 

break  ; 

case   ClassWriter  .  VAR_INSN  : 

case   ClassWriter  .  SBYTE_INSN  : 

case   ClassWriter  .  LDC_INSN  : 

u  +=  2  ; 

break  ; 

case   ClassWriter  .  SHORT_INSN  : 

case   ClassWriter  .  LDCW_INSN  : 

case   ClassWriter  .  FIELDORMETH_INSN  : 

case   ClassWriter  .  TYPE_INSN  : 

case   ClassWriter  .  IINC_INSN  : 

u  +=  3  ; 

break  ; 

case   ClassWriter  .  ITFMETH_INSN  : 

u  +=  5  ; 

break  ; 

default  : 

u  +=  4  ; 

break  ; 

} 

if  (  insert  !=  0  )  { 

int  [  ]  newIndexes  =  new   int  [  allIndexes  .  length  +  1  ]  ; 

int  [  ]  newSizes  =  new   int  [  allSizes  .  length  +  1  ]  ; 

System  .  arraycopy  (  allIndexes  ,  0  ,  newIndexes  ,  0  ,  allIndexes  .  length  )  ; 

System  .  arraycopy  (  allSizes  ,  0  ,  newSizes  ,  0  ,  allSizes  .  length  )  ; 

newIndexes  [  allIndexes  .  length  ]  =  u  ; 

newSizes  [  allSizes  .  length  ]  =  insert  ; 

allIndexes  =  newIndexes  ; 

allSizes  =  newSizes  ; 

if  (  insert  >  0  )  { 

state  =  3  ; 

} 

} 

} 

if  (  state  <  3  )  { 

--  state  ; 

} 

}  while  (  state  !=  0  )  ; 

ByteVector   newCode  =  new   ByteVector  (  code  .  length  )  ; 

u  =  0  ; 

while  (  u  <  code  .  length  )  { 

