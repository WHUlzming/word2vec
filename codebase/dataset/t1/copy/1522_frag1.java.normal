fileNameClasseMllr  =  ps  .  getString  (  "classeMllr"  ,  ""  )  ; 

} 



private   void   loadProperties  (  )  { 

if  (  properties  ==  null  )  { 

properties  =  new   Properties  (  )  ; 

try  { 

URL   url  =  getClass  (  )  .  getResource  (  propsFile  )  ; 

properties  .  load  (  url  .  openStream  (  )  )  ; 

}  catch  (  IOException   ioe  )  { 

ioe  .  printStackTrace  (  )  ; 

} 

} 

} 













private   boolean   getIsBinaryDefault  (  )  { 

loadProperties  (  )  ; 

String   binary  =  (  String  )  properties  .  get  (  PROP_IS_BINARY  )  ; 

if  (  binary  !=  null  )  { 

return  (  Boolean  .  valueOf  (  binary  )  .  equals  (  Boolean  .  TRUE  )  )  ; 

}  else  { 

return   PROP_IS_BINARY_DEFAULT  ; 

} 

} 













private   boolean   getSparseFormDefault  (  )  { 

loadProperties  (  )  ; 

String   sparse  =  (  String  )  properties  .  get  (  PROP_SPARSE_FORM  )  ; 

if  (  sparse  !=  null  )  { 

return  (  Boolean  .  valueOf  (  binary  )  .  equals  (  Boolean  .  TRUE  )  )  ; 

}  else  { 

return   PROP_SPARSE_FORM_DEFAULT  ; 

} 

} 









private   int   getVectorLengthDefault  (  )  { 

loadProperties  (  )  ; 

String   length  =  (  String  )  properties  .  get  (  PROP_VECTOR_LENGTH  )  ; 

if  (  length  !=  null  )  { 

return   Integer  .  parseInt  (  length  )  ; 

}  else  { 

return   PROP_VECTOR_LENGTH_DEFAULT  ; 

} 

} 













private   String   getModelDefault  (  )  { 

loadProperties  (  )  ; 

String   mdef  =  (  String  )  properties  .  get  (  PROP_MODEL  )  ; 

if  (  mdef  !=  null  )  { 

return   mdef  ; 

}  else  { 

return   PROP_MODEL_DEFAULT  ; 

} 

} 













private   String   getDataLocationDefault  (  )  { 

loadProperties  (  )  ; 

String   location  =  (  String  )  properties  .  get  (  PROP_DATA_LOCATION  )  ; 

if  (  location  !=  null  )  { 

return   location  ; 

}  else  { 

return   PROP_DATA_LOCATION_DEFAULT  ; 

} 

} 



public   String   getName  (  )  { 

return   name  ; 

} 



public   void   load  (  )  throws   IOException  { 

hmmManager  =  new   HMMManager  (  )  ; 

contextIndependentUnits  =  new   LinkedHashMap  (  )  ; 

