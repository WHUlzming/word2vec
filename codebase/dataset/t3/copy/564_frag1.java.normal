private   int   getChar  (  )  throws   IOException  { 

if  (  eof  )  { 

return  -  1  ; 

} 

int   result  =  in  .  read  (  )  ; 

if  (  result  ==  -  1  )  { 

eof  =  true  ; 

} 

return   result  ; 

} 



private   void   pushBack  (  int   acceptLength  )  throws   IOException  { 

int   length  =  text  .  length  (  )  ; 

for  (  int   i  =  length  -  1  ;  i  >=  acceptLength  ;  i  --  )  { 

eof  =  false  ; 

in  .  unread  (  text  .  charAt  (  i  )  )  ; 

} 

} 



protected   void   unread  (  Token   token  )  throws   IOException  { 

String   text  =  token  .  getText  (  )  ; 

int   length  =  text  .  length  (  )  ; 

for  (  int   i  =  length  -  1  ;  i  >=  0  ;  i  --  )  { 

eof  =  false  ; 

in  .  unread  (  text  .  charAt  (  i  )  )  ; 

} 

pos  =  token  .  getPos  (  )  -  1  ; 

line  =  token  .  getLine  (  )  -  1  ; 

} 



private   String   getText  (  int   acceptLength  )  { 

StringBuffer   s  =  new   StringBuffer  (  acceptLength  )  ; 

for  (  int   i  =  0  ;  i  <  acceptLength  ;  i  ++  )  { 

s  .  append  (  text  .  charAt  (  i  )  )  ; 

} 

return   s  .  toString  (  )  ; 

} 



private   static   int  [  ]  [  ]  [  ]  [  ]  gotoTable  ; 



private   static   int  [  ]  [  ]  accept  ; 



public   static   class   State  { 



public   static   final   State   INITIAL  =  new   State  (  0  )  ; 



private   int   id  ; 



private   State  (  int   id  )  { 

this  .  id  =  id  ; 

} 



public   int   id  (  )  { 

return   id  ; 

} 

} 

} 

